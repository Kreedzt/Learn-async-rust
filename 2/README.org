* 了解 future 调度
** Future trait
   ~Future~ trait 简单实现:
   #+begin_src rust
     trait Simple Future {
         type Output;
         // wake 为执行成功后回调
         fn poll(&mut self, wake: fn()) -> Poll<Self::Output>;
     }

     enum Poll<T> {
         Ready(T), // 完成
         Pending // 执行中
     }
   #+end_src

   #+begin_src rust
     pub struct SocketRead<'a> {
         socket: &'a Socket,
     }

     impl SimpleFuture for SocketRead<'_> {
         type Output = Vec<u8>;

         fn poll(&mut self, wake: fn()) -> Poll<Self::Output> {
             if self.socket.has_data_to_read() {
                 Poll::Ready(self.socket.read_buf())
             } else {
                 self.socket.set_readable_callback(wake);
                 Poll::Pending
             }
         }
     }
   #+end_src

   ~join~ 实现: (依次执行)
   #+begin_src rust
     pub struct AndThenFut<FutureA, FutureB> {
         first: Option<FutureA>,
         second: FutureB
     }

     impl<FutureA, FutureB> SimpleFuture for AndThenFut<FutureA, FutureB>
     where
         FutureA: SimpleFuture<Output = ()>,
         FutureB: SimpleFuture<Output = ()>,
     {
         type Output = ();

         fn poll(&mut self, wake: fn()) -> Poll<Self::Output> {
             if let Some(first) = &mut self.first {
                 match first.poll(wake) {
                     Poll::Ready(()) => self.first.take(),
                     Poll::Pending => return Poll::Pending,
                 }
             }

             self.second.poll(wake)
         }
     }
   #+end_src

   ~Future~ 真实实现:
   #+begin_src rust
     trait Future {
         type Output;

         fn poll(
             self: Pin<&mut Self>,
             cx: &mut Context<'_>,
         ) -> Poll<Self::Output>;
     }
   #+end_src
** 通过 Waker 唤醒任务
   共识: futures 无法在第一次 ~poll~ 操作后完成. 需要确保再次 ~poll~ 以便更新进
   度, 通过 ~Waker~ 类型完成此操作.

   每个 future 被 ~poll~ 执行后, 作为 "task" 的一部分, Task 作为 futures 为执行
   器提供的顶级提交.

   ~Waker~ 提供 ~wake()~ 方法可被用于告知执行器: 关联的任务应该为唤醒状态. 当
   ~wake()~ 被调用时, 执行器知道任务关联的 ~Waker~ 准备更新进度, 在将来应该被再
   次 ~poll~.

   ~Waker~ 也实现了 ~clone()~ 方法, 所以可以被复制和存储.

*** 构建一个计时器
    当 timer 被构造时, 创建一个线程, 睡眠指定的时间, 通过发送 future 信号通知流逝的时间

** 构建一个执行器
   Future 运行为惰性的: 只有在 async 函数中使用 ~.await~ 才可以顺序执行, 谁会为
   顶层的 ~async~ 函数运行和返回 future ? 需要一个 ~Future~ 执行器来进行此操作.

   
